@page "/weather"

@attribute [StreamRendering]
@inject IHttpClientFactory _httpClientFactory

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="weathergrid" Items="@forecasts" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="WeatherForecast">
        <PropertyColumn Title="Date" Property="@(c => c!.Date)" Align="Align.Start" />
        <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Align="Align.Center" />
        <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Align="Align.Center" />
        <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Align="Align.End" />
    </FluentDataGrid>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    [Parameter] public string ServerName { get; set; } = "FanewsIntelligence";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        var result = await GetWeatherForecastAsync();
        forecasts = result.AsQueryable();
    }

    private async Task<WeatherForecast[]> GetWeatherForecastAsync()
    {

        List<WeatherForecast>? forecasts = null;

        using (HttpClient client = _httpClientFactory.CreateClient(ServerName))
        {
            await foreach (var forecast in client.GetFromJsonAsAsyncEnumerable<WeatherForecast>("/weatherforecast"))
            {
                if (forecasts?.Count >= 10) break;

                if (forecast is not null)
                {
                    forecasts ??= [];
                    forecasts.Add(forecast);
                }
            }
        }

        return forecasts?.ToArray() ?? [];

    }
}
