@using IntelligentAI.Models.Search

@inject IToastService ToastService
@inject IAiModelService ModelService

<div style="display: flex; flex-direction:row;  ">
    <div style="margin-right: 10px;">
        <FluentDatePicker Label="News Date Start:" @bind-Value="@_selectedDateFrom" />
    </div>
    <div style="margin-right: 10px;">
        <FluentDatePicker Label="News Date End:" AriaLabel="To" @bind-Value="@_selectedDateTo" />
    </div>
</div>

<p></p>
<FluentLabel>Types:</FluentLabel>
<FluentCheckbox Style="margin-top: 10px;" Label="@($"Select All")"
                ThreeState="true"
                ShowIndeterminate="false"
                @bind-CheckState="AreAllTypesVisible" />
<FluentStack Style="margin-left: 20px;margin-top: 10px;" Orientation="Orientation.Vertical">

    @foreach (var resourceType in _allTypes)
    {
        bool isChecked = _visibleResourceTypes.Contains(resourceType);
        <FluentCheckbox Label="@($"{resourceType}")"
                        @bind-Value:get="isChecked"
                        @bind-Value:set="c => OnResourceTypeVisibilityChanged(resourceType, c)" />
    }
</FluentStack>
<p></p>

<FluentNumberField @bind-Value="_maxTopicCount" Label="Max Count:" />
<p></p>

<FluentCombobox Placeholder="Please select a mode" ReadOnly="true" Items="@EventModes" @bind-Value="@_selectedMode" Label="Event Mode:" />
<p></p>

<FluentLabel>Question:</FluentLabel>

<div style="position: relative; width: 100%;">
    <FluentTextArea Disabled="@(Loading)" Rows="3" @bind-Value="@UserQuestion" Resize="TextAreaResize.Vertical" Placeholder="有问题尽管问我吧..." style="width: 100%; height: 100%; border: none; margin-right: 50px;" />
    @if (Loading)
    {
        <FluentButton style="position: absolute; right: 65px; bottom: 10px; margin-top: 10px;"
                      IconStart="@(new Icons.Regular.Size16.Dismiss())"
                      Appearance="Appearance.Outline"
                      OnClick="@CancelAsync">

        </FluentButton>
    }
    <FluentButton style="position: absolute; right: 15px; bottom: 10px; margin-top: 10px;"
                  IconStart="@(new Icons.Regular.Size16.ArrowForward())"
                  Appearance="Appearance.Accent"
                  Loading="@Loading"
                  OnClick="@SendQuestionAsync">

    </FluentButton>
</div>
<br>

@code {
    private int _maxTopicCount = 10;

    private string _selectedMode = "Vector";

    private DateTime? _selectedDateFrom = DateTime.Today.AddMonths(-1);

    private DateTime? _selectedDateTo = DateTime.Today.AddDays(1);

    private readonly Array _allResourceTypes = System.Enum.GetValues(typeof(GroupArticleType));

    private IEnumerable<string> _allTypes => _allResourceTypes.OfType<GroupArticleType>()
        .Where(type => (int)type > 0 && (int)type < 6)
        .Select(type => type.ToString());

    private HashSet<string> _visibleResourceTypes = new HashSet<string>();

    public string[] EventModes =>
    [
        "Vector",
    "CoreWords",
    "Vector + CoreWords",
    "CoreWords + Vector"
    ];

    public string UserQuestion { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<EventVenation>> OnEventsReceived { get; set; }
    [Parameter]
    public EventCallback<string> OnQuestionReceived { get; set; }

    [Parameter]
    public int SelectedModel { get; set; } = 12;

    // 外部对脉络进行处理过程中，禁止搜索新的脉络
    public bool Loading { get; set; } = false;

    // 外部对脉络进行处理过程中取消，内部也取消
    public CancellationTokenSource Cts { get; set; } = new CancellationTokenSource();

    #region 事件触发

    protected override async Task OnInitializedAsync()
    {
        // 初始化勾选所有文章类型
        _visibleResourceTypes = new HashSet<string>(_allTypes);

        await base.OnInitializedAsync();
    }

    private async Task CancelAsync()
    {
        await Cts.CancelAsync();

        Loading = false;

        await InvokeAsync(StateHasChanged);
    }

    public async Task SendQuestionAsync()
    {
        if (string.IsNullOrWhiteSpace(UserQuestion)) return;

        #region Initialization

        Cts = new CancellationTokenSource();

        Loading = true;

        await InvokeAsync(StateHasChanged);

        #endregion

        if (OnQuestionReceived.HasDelegate)
        {
            // 触发事件
            await OnQuestionReceived.InvokeAsync(UserQuestion);
        }

        var events = await CallEventsAsync(Cts.Token);

        if (events is null || !events.Any())
        {
            ToastService.ShowToast(ToastIntent.Warning, "No data to show!");

            Loading = false;

            await InvokeAsync(StateHasChanged);

            return;
        }

        if (OnEventsReceived.HasDelegate)
        {
            // 触发事件
            await OnEventsReceived.InvokeAsync(events);
        }

        Loading = false;

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region 属性变化

    private bool? AreAllTypesVisible
    {
        get
        {
            return _visibleResourceTypes.SetEquals(_allTypes)
                ? true
                : _visibleResourceTypes.Count == 0
                    ? false
                    : null;
        }
        set
        {
            if (value is true)
            {
                _visibleResourceTypes.UnionWith(_allTypes);
            }
            else if (value is false)
            {
                _visibleResourceTypes.Clear();
            }
        }
    }


    protected void OnResourceTypeVisibilityChanged(string resourceType, bool isVisible)
    {
        if (isVisible)
        {
            _visibleResourceTypes.Add(resourceType);
        }
        else
        {
            _visibleResourceTypes.Remove(resourceType);
        }
    }


    #endregion

    #region 服务调用


    private async Task<List<EventVenation>> CallEventsAsync(CancellationToken cancellation = default)
    {
        var result = new List<EventVenation>();

        var searchArgs = new SearchArgs()
            {
                Keywords = new List<Keyword>() { new Keyword() { Word = UserQuestion } },
                Date = new DateRange() { From = _selectedDateFrom.Value, To = _selectedDateTo.Value },
                PageIndex = 1,
                PageSize = _maxTopicCount,
                GroupArticletypes = _visibleResourceTypes.Select(str => (GroupArticleType)Enum.Parse(typeof(GroupArticleType), str)).ToArray(),
                OrderBy = "score desc"
            };

        var eventTask = _selectedMode switch
        {
            "Vector" => ModelService.GetEventsByVectorAsync(searchArgs, cancellationToken: cancellation),
            "CoreWords" => ModelService.GetEventsByCoreWordsAsync(searchArgs, analyzeKeyword: false, cancellationToken: cancellation),
            "Vector + CoreWords" => ModelService.GetEventsAsync(searchArgs, cancellationToken: cancellation),
            "CoreWords + Vector" => CallCoreWordsSecondarySearchEventsAsync(searchArgs, cancellation: cancellation),
            _ => ModelService.GetEventsByVectorAsync(searchArgs, cancellationToken: cancellation)
        };

        result = await eventTask;

        return result;
    }

    private async Task<List<EventVenation>> CallCoreWordsSecondarySearchEventsAsync(
        SearchArgs searchArgs,
        CancellationToken cancellation = default)
    {
        var firstSearchList = await ModelService.GetEventsByCoreWordsAsync(searchArgs, analyzeKeyword: false, cancellationToken: cancellation);

        var firstArticle = await ModelService.GetArticleByIdAsync(firstSearchList.First().Id);

        var replaces = new Dictionary<string, string>()
            {
                ["正文"] = firstArticle.Contenttxt
            };

        var first = await ModelService.AnswerTextByPromptAsync("prompt10", replaces, SelectedModel, cancellation);

        searchArgs.Keywords.First(key => key.AndOrNot == 0).Word = first;

        var secondarySearchList = await ModelService.GetEventsByVectorAsync(cancellationToken: cancellation, arguments: searchArgs);

        return secondarySearchList;
    }


    #endregion

    public void Dispose()
    {
        Cts?.Cancel();
        Cts?.Dispose();
    }

}