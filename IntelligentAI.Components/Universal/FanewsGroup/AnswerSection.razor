@using IntelligentAI.Enumerations
@using IntelligentAI.Models.Search

@inject IToastService ToastService
@inject IAiModelService ModelService

<p></p>
<FluentLabel>Model:</FluentLabel>
<FluentSelect TOption="ModelEnum"
              Items="@Models"
              Id="model-listbox"
              OptionValue="@(m => m.Id.ToString())"
              OptionText="@(m => m.Name + "-" + m.Description)"
              @bind-Value="@SelectedModel" />

<p></p>
<FluentLabel>Prompt:</FluentLabel>
<FluentCombobox Placeholder="Please select a prompt" Items="@Prompts" @bind-Value="@_selectedPrompt" />

@if (_selectedPrompt == PromptEnum.Custom.Name || _selectedPrompt == PromptEnum.System.Name)
{
    <p></p>
    <FluentLabel>@(_selectedPrompt) Prompt:</FluentLabel>
    <FluentTextArea @bind-Value="@_prompt" style="width: 100%;" Resize="TextAreaResize.Vertical"></FluentTextArea>
}

<p></p>
<FluentLabel>Question:</FluentLabel>

<div style="position: relative; width: 100%;">
    <FluentTextArea Disabled="@(_loading)" Rows="@Rows" @bind-Value="@UserQuestion" Resize="TextAreaResize.Vertical" Placeholder="有问题尽管问我吧..." style="width: 100%; height: 100%; border: none; margin-right: 50px;" />
    @if (_loading)
    {
        <FluentButton style="position: absolute; right: 75px; bottom: 10px; margin-top: 10px;"
                      IconStart="@(new Icons.Regular.Size16.Dismiss())"
                      Appearance="Appearance.Outline"
                      OnClick="@CancelAsync">

        </FluentButton>

    }
    <FluentButton style="position: absolute; right: 25px; bottom: 10px; margin-top: 10px;"
                  IconStart="@(new Icons.Regular.Size16.ArrowForward())"
                  Appearance="Appearance.Accent"
                  Loading="@_loading"
                  OnClick="@SendQuestionAsync">
    </FluentButton>
</div>
<p></p>

@code {

    private bool _loading = false;

    private string _botAnswer;

    private string _prompt;

    private string _selectedPrompt = PromptEnum.Null.Name;

    public string[] Prompts => PromptEnum.GetAll<PromptEnum>().Select(s => s.Name).ToArray();

    public ModelEnum[] Models => ModelEnum.GetAll<ModelEnum>().Where(m => m.Id > 1).ToArray();

    private CancellationTokenSource _cts = new CancellationTokenSource();

    [Parameter]
    public int Rows { get; set; } = 10;

    [Parameter]
    public string UserQuestion { get; set; }

    [Parameter]
    public string SelectedModel { get; set; } = "12";

    [Parameter]
    public EventCallback<string> OnAnswerReceived { get; set; }

    private async Task SendQuestionAsync()
    {
        StringBuilder streamingContentBuilder = new StringBuilder();

        _cts = new CancellationTokenSource();

        _loading = true; await InvokeAsync(StateHasChanged);

        // 创建请求对象
        var request = new AiArguments(
            UserQuestion,
            _selectedPrompt,
            _selectedPrompt == PromptEnum.Custom.Name ? _prompt : string.Empty,
            0.8,
            0.3
        );

        int.TryParse(SelectedModel, out int model);

        var stream = ModelService.AnswerStringsAsync(request, model, cancellationToken: _cts.Token);

        try
        {
            await foreach (var message in stream)
            {
                if (string.IsNullOrEmpty(message))
                {
                    streamingContentBuilder.AppendLine(message);
                }
                else
                {
                    streamingContentBuilder.Append(message);
                }

                _botAnswer = streamingContentBuilder.ToString();

                if (OnAnswerReceived.HasDelegate)
                {
                    // 触发事件
                    await OnAnswerReceived.InvokeAsync(_botAnswer);
                }
            }
        }

        catch (Exception ex)
        {
            var message = $"Answer failed. Exception message: {ex.Message}";

            ToastService.ShowToast(ToastIntent.Error, message);
        }
        _loading = false; await InvokeAsync(StateHasChanged);

    }

    private async Task CancelAsync()
    {
        await _cts.CancelAsync();

        _loading = false;

    }
}
