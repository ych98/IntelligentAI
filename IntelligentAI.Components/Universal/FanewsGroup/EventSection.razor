@using IntelligentAI.Components.Pages.FanewsGroup
@using Models.Search

@inject IToastService ToastService
@inject IAiModelService ModelService

@inject EventApiClient EventApi

<div style="display: flex; flex-direction:row;  ">
    <div style="margin-right: 10px;">
        <FluentDatePicker Label="News Date Start:" @bind-Value="@_selectedDateFrom" />
    </div>
    <div style="margin-right: 10px;">
        <FluentDatePicker Label="News Date End:" AriaLabel="To" @bind-Value="@_selectedDateTo" />
    </div>
</div>

<br />

<div>
<FluentLabel>Types:</FluentLabel>
<FluentCheckbox Style="margin-top: 10px;" Label="@($"Select All")"
                ThreeState="true"
                ShowIndeterminate="false"
                @bind-CheckState="AreAllTypesVisible" />
<FluentStack Style="margin-left: 20px;margin-top: 10px;" Orientation="Orientation.Vertical">

    @foreach (var resourceType in _allTypes)
    {
        bool isChecked = _visibleResourceTypes.Contains(resourceType);
        <FluentCheckbox Label="@($"{resourceType}")"
                        @bind-Value:get="isChecked"
                        @bind-Value:set="c => OnResourceTypeVisibilityChanged(resourceType, c)" />
    }
</FluentStack>
</div>

<br />

<div>
    <FluentNumberField @bind-Value="_maxTopicCount" Label="Max Count:" />
</div>

<br />

<div>

    <FluentSelect Items="@EventOptions"
                  style="width: 300px;"
                  Id="model-listbox"
                  OptionValue="@(m => m.Value.ToString())"
                  OptionText="@(m => m.Text)"
                  OptionSelected="@(m => m.Selected)"
                  Label="Event Base Mode:"
                  @bind-Value="@_selectedBaseMode" />

</div>

<br/>

<div>
    <FluentSelect Items="@AdditionalModeOptions"
                  style="width: 300px;"
                  Id="model-listbox"
                  OptionValue="@(m => m.Value)"
                  OptionText="@(m => m.Text)"
                  OptionSelected="@(m => m.Selected)"
                  Label="Event Additional Mode:"
                  @bind-Value="@_selectedMode" />
</div>

<br />

<FluentLabel>Question:</FluentLabel>
<div style="position: relative; width: 100%;">
    <FluentTextArea Disabled="@(Loading)" Rows="3" @bind-Value="@UserQuestion" Resize="TextAreaResize.Vertical" Placeholder="有问题尽管问我吧..." style="width: 100%; height: 100%; border: none; margin-right: 50px;" />
    @if (Loading)
    {
        <FluentButton style="position: absolute; right: 65px; bottom: 10px; margin-top: 10px;"
                      IconStart="@(new Icons.Regular.Size16.Dismiss())"
                      Appearance="Appearance.Outline"
                      OnClick="@CancelAsync">

        </FluentButton>
    }
    <FluentButton style="position: absolute; right: 15px; bottom: 10px; margin-top: 10px;"
                  IconStart="@(new Icons.Regular.Size16.ArrowForward())"
                  Appearance="Appearance.Accent"
                  Loading="@Loading"
                  OnClick="@SendQuestionAsync">

    </FluentButton>
</div>

@code {
    private CancellationTokenSource _cts;

    private int _maxTopicCount = 10;

    private string _selectedMode = "none";

    private string _selectedBaseMode = "1";

    private DateTime? _selectedDateFrom = DateTime.Today.AddMonths(-1);

    private DateTime? _selectedDateTo = DateTime.Today.AddDays(1);

    private readonly Array _allResourceTypes = System.Enum.GetValues(typeof(Models.Search.GroupArticleType));

    private IEnumerable<string> _allTypes => _allResourceTypes.OfType<Models.Search.GroupArticleType>()
        .Where(type => (int)type > 0 && (int)type < 6)
        .Select(type => type.ToString());

    private HashSet<string> _visibleResourceTypes = new HashSet<string>();

    public string[] AdditionalModes =>
    [
        "none",
    "all",
    "event",
    "abstraction"
    ];

    public List<Option<string>> AdditionalModeOptions = new()
    {
        { new Option<string> { Value = "none", Text = "无", Icon = (new Icons.Regular.Size16.AnimalRabbit(), Color.Neutral, "start"  ), Selected = true } },
        { new Option<string> { Value = "all", Text = "脉络时间，脉络标题，脉络概要", Icon = (new Icons.Regular.Size16.AnimalRabbit(), Color.Neutral, "start"  ) } },
        { new Option<string> { Value = "event", Text = "脉络时间", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<string> { Value = "abstraction", Text = "脉络标题，脉络概要", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
    };

    public List<Option<int>> EventOptions = new()
    {
        { new Option<int> { Value = 1, Text = "语义检索", Icon = (new Icons.Regular.Size16.AnimalRabbit(), Color.Neutral, "start"  ), Selected = true } },
        { new Option<int> { Value = 2, Text = "智能检索", Icon = (new Icons.Regular.Size16.AnimalRabbit(), Color.Neutral, "start"  ) } },

        { new Option<int> { Value = 11, Text = "语义检索 + 提问凡闻分词 + 高级检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 12, Text = "语义检索 + 提问模型分词 + 高级检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 13, Text = "语义检索 + 文章凡闻分词 + 高级检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 14, Text = "语义检索 + 文章模型分词 + 高级检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },

        { new Option<int> { Value = 15, Text = "语义检索 + 提问凡闻分词 + 智能检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  )} },
        { new Option<int> { Value = 16, Text = "语义检索 + 提问模型分词 + 智能检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 17, Text = "语义检索 + 文章凡闻分词 + 智能检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 18, Text = "语义检索 + 文章模型分词 + 智能检索", Icon = (new Icons.Regular.Size16.AnimalDog(), Color.Neutral, "start"  ) } },

        { new Option<int> { Value = 31, Text = "智能检索 + 文章模型摘要 + 语义检索", Icon = (new Icons.Regular.Size16.AnimalCat(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 32, Text = "智能检索 + 文章凡闻摘要 + 语义检索", Icon = (new Icons.Regular.Size16.AnimalCat(), Color.Neutral, "start"  ) } },

        { new Option<int> { Value = 91, Text = "分词判断 + 自动模式", Icon = (new Icons.Regular.Size16.AnimalTurtle(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 92, Text = "分词判断 + 自动模式 + 精准检索", Icon = (new Icons.Regular.Size16.AnimalTurtle(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 93, Text = "字数判断 + 自动模式 + 精准检索", Icon = (new Icons.Regular.Size16.AnimalTurtle(), Color.Neutral, "start"  ) } },
        { new Option<int> { Value = 0, Text = "字数判断 + 自动模式", Icon = (new Icons.Regular.Size16.AnimalTurtle(), Color.Neutral, "start"  ) } },
    };

    public string UserQuestion { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<Pages.FanewsGroup.EventResult>> OnEventsReceived { get; set; }

    [Parameter]
    public int SelectedModel { get; set; } = 12;

    // 外部对脉络进行处理过程中，禁止搜索新的脉络
    public bool Loading { get; set; } = false;

    #region 事件触发

    protected override async Task OnInitializedAsync()
    {
        // 初始化勾选所有文章类型
        _visibleResourceTypes = new HashSet<string>(_allTypes);

        await base.OnInitializedAsync();
    }

    private async Task CancelAsync()
    {
        await _cts.CancelAsync();

        Loading = false;

        await InvokeAsync(StateHasChanged);
    }

    public async Task SendQuestionAsync()
    {
        if (string.IsNullOrWhiteSpace(UserQuestion)) return;

        #region Initialization

        _cts = new CancellationTokenSource();

        Loading = true;

        await InvokeAsync(StateHasChanged);

        #endregion

        var events = await CallEventsAsync(_cts.Token);

        if (events is null || !events.Any())
        {
            ToastService.ShowToast(ToastIntent.Warning, "No data to show!");

            Loading = false;

            await InvokeAsync(StateHasChanged);

            return;
        }

        if (OnEventsReceived.HasDelegate)
        {
            // 触发事件
            await OnEventsReceived.InvokeAsync(events);
        }

        Loading = false;

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region 属性变化

    private bool? AreAllTypesVisible
    {
        get
        {
            return _visibleResourceTypes.SetEquals(_allTypes)
                ? true
                : _visibleResourceTypes.Count == 0
                    ? false
                    : null;
        }
        set
        {
            if (value is true)
            {
                _visibleResourceTypes.UnionWith(_allTypes);
            }
            else if (value is false)
            {
                _visibleResourceTypes.Clear();
            }
        }
    }


    protected void OnResourceTypeVisibilityChanged(string resourceType, bool isVisible)
    {
        if (isVisible)
        {
            _visibleResourceTypes.Add(resourceType);
        }
        else
        {
            _visibleResourceTypes.Remove(resourceType);
        }
    }
    #endregion

    #region 服务调用

    private async Task<Pages.FanewsGroup.EventResult[]> CallEventsAsync(CancellationToken cancellation = default)
    {
        var result = new List<Pages.FanewsGroup.EventResult>();

        var searchArgs = new Models.Search.SearchArgs()
            {
                Keywords = new List<Models.Search.Keyword>() { new Models.Search.Keyword() { Word = UserQuestion } },
                Date = new Models.Search.DateRange() { From = _selectedDateFrom.Value, To = _selectedDateTo.Value },
                PageIndex = 1,
                PageSize = _maxTopicCount,
                GroupArticletypes = _visibleResourceTypes.Select(str => (Models.Search.GroupArticleType)Enum.Parse(typeof(Models.Search.GroupArticleType), str)).ToArray(),
                ContentWordsCount = new IntRange() { From = 200, To = 4000 }
            };

        var events = await EventApi.GetEventsAsync(searchArgs, _selectedBaseMode, _selectedMode, cancellation);

        return events;
    }

    #endregion

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

}