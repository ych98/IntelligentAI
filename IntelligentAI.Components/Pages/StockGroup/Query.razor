@using IntelligentAI.Components.ApiClients
@using IntelligentAI.Components.Pages.FanewsGroup
@using IntelligentAI.Components.Universal.FanewsGroup

@inject IToastService ToastService
@inject IAiModelService ModelService


<p></p>
<FluentLabel>Events:</FluentLabel>
<FluentDataGrid Items="@_events" Style="width: 100%; min-height: 200px;">
    <PropertyColumn Property="@(e => e.Id)" Sortable="true" />
    <PropertyColumn Property="@(e => e.Date)" Format="yyyy-MM-dd" Sortable="true" />
    <PropertyColumn Property="@(e => e.EventDate)" Sortable="true" Class="multiline-text" />
    <PropertyColumn Property="@(e => e.Title)" Sortable="true" Class="multiline-text" />
    <PropertyColumn Property="@(e => e.Summary)" Sortable="true" Class="multiline-text" />
    <PropertyColumn Property="@(e => e.Abstraction)" Class="multiline-text" />
    <PropertyColumn Property="@(e => e.Url)" Class="multiline-text" />
    <PropertyColumn Property="@(e => e.Score)" Sortable="true" />
</FluentDataGrid>

@code {

    private string _userQuestion;

    private IQueryable<EventResult> _events;

    private CancellationTokenSource _cts = new CancellationTokenSource();

    #region 事件触发

    private async Task ReceiveEventsAsync(IEnumerable<EventResult> eventVenation)
    {
        _events = eventVenation.AsQueryable();

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

}